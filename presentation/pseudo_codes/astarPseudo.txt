function getHeuristic(puzzle, bottleHeight): return (totalWaters - numCorrectWaters)
    totalWaters <- the number of waters expected in the puzzle
    numCorrectWaters <- 0
    for each bottle in the puzzle do
        if the bottle is not empty then
            if the bottle contains only one color then
                numCorrectWaters <- numCorrectWaters + the number of waters in the bottle

function solvePuzzle(puzzle, bottleHeight=None, visitedPositions=set(), answer=[]):
    if bottleHeight is not given then
        bottleHeight <- the maximum length of the puzzle
    add the puzzle (in canonical string form) to visitedPositions
    create a priority queue ordered by getHeuristic()
    for each bottle in puzzle do
        for each other bottle in the puzzle do
            if the bottles are the same then
                skip this iteration
            if moving water from the current bottle to the candidate bottle is a valid move then
                make a deep copy of the puzzle
                move water from the current bottle to the candidate bottle in the copy puzzle
                if the copy puzzle is solved then
                    add the copy puzzle to the answer list
                    return True
                if the copy puzzle (in canonical string form) has not been visited then
                    add the copy puzzle to the priority queue
                    add the copy puzzle (in canonical string form) to visitedPositions
                    
    while the priority queue is not empty:
        get the current puzzle from the priority queue
        try solvePuzzle(with the current puzzle, bottleHeight, visitedPositions, and answer as input)
        if the puzzle is solved then
            add the puzzle to the answer list
            return True
    return False
